1.Springboot 默认日志按天打 .gz 包是由于 `application.yml` 中的 `logging.logback.rollingpolicy.file-name-pattern=${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz`属性决定的。

2.Spring 应用通常会使用 Placeholder 来注入配置，使用的格式：`${someKey:someDefaultValue}`，如：${timeout:30000}。冒号前面的是 key，冒号后面是默认值。 建议在实际使用时尽量给出默认值，以免由于 key 没有定义导致运行时错误。

3.SpringBoot 设置日志输出级别：
	① `application.properties` 文件中配置：
		# 设置默认日志级别
		logging.level.root=WARN
		# 设置某个包日志级别
		logging.level.org.springframework.web=DEBUG
		logging.level.org.hibernate=ERROR
	② Java -Dkey=value -jar *.jar 启动参数中设置：
		-Dlogging.level.root=DEBUG

4.Spring `@EnableScheduling` 定时任务 `cron` 表达式设置为 `-` 为不执行任务。
	用法示例：
    	① 配置中直接设置为 `-`
    		task.cron = - 
    	② 设置 SpringEL 表达式默认值为 `-`，当配置文件中 `task.cron` 缺省 或 配置为 `task.cron = -` 任务均不执行。
    		@Scheduled(cron = "${task.cron:-}")
	注：可参考 `org.springframework.scheduling.annotation.Scheduled#CRON_DISABLED` 实现

5.SpringBoot 配置不自动装配某些模块。
	/**
	 * DataSourceAutoConfiguration.class	DataSource 模块配置
	 * SecurityAutoConfiguration.class 		SpringSecurity 模块配置
	 * ManagementWebSecurityAutoConfiguration.class		actuator 安全模块配置
	 */
	@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class, SecurityAutoConfiguration.class, ManagementWebSecurityAutoConfiguration.class})
	public class ServerStart {
	    public static void main(String[] args) {
	        SpringApplication.run(ServerStart.class, args);
	    }
	    
	}
6.


