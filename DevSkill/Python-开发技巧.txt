Python-开发技巧：

1.不换行输出：print(x, end=" ")

2.不转义输出：
	>>> print(r'\n')
	输出 \n

3.数值的除法包含两个运算符：`/` 返回一个浮点数，`//` 返回一个整数。
	>>> 2 / 4  # 除法，得到一个浮点数
	输出 0.5
	>>> 2 // 4 # 除法，得到一个整数
	输出 0

4.乘方
	>>> 2 ** 5
	输出 32

5.输出字符串两次:
	>>> print("Hello World!" * 2)
	输出 Hello World!Hello World!

6.获取脚本执行参数：
	sys.argv 获取程序参数，sys.argv[0] 第一个参数为脚本名。

7.执行 Shell 脚本：
	import commands
	line = commands.getstatusoutput('ls ' + app_lib_path + '/*.jar')

8.创建日志目录：
	BASE_DIR = os.path.dirname(os.path.abspath(__file__))
	dirs = os.path.join(BASE_DIR, 'logs')
	if not os.path.exists(dirs):
	    os.makedirs(dirs)

9.尝试导包：
	try:
	    import simplejson as json
	except ImportError:
	    import json


10.文件处理：
	with open(filename, 'wb') as fd:
	    for chunk in r.iter_content(chunk_size=128):
	        fd.write(chunk)

11.字符串与字节转化：
	str 对象和 bytes 对象可以使用 .encode() (str -> bytes) 或 .decode() (bytes -> str)方法相互转化。 
	str("abc").encode().decode()

12.多行语句:
	Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠 `\` 来实现多行语句，例如：
	total = "item_one" + \
	        "item_two" + \
	        "item_three"

13.获取毫秒时间戳、毫秒时间字符串。
	毫秒时间戳：int(time.time() * 1000)
	毫秒时间：str(datetime.datetime.now())[:-3]
			  或
			  datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]

14.json.dumps(body, ensure_ascii=False) 转化为 JSON 字符串(序列化)时，中文不使用 unicode 编码。

15.del 删除实体变量 或 集合中元素。
	del a 			删除整个变量。
	del a[0]		删除集合变量中一个元素。
	del a[3:6]		删除集合变量中多个元素。
	del dict['k']	删除字典变量中某 Key。

16.Python3 启用一个简单的 Web 服务：
	python -m http.server 18080

17.遍历方式：
	① 字典中遍历时，关键字和对应的值可以使用 items() 同时遍历：
		d = {"a": "1", "b": "2", "c": "3"}
		for k, v in d.items():
		    print(k + "-->" + v)

	② 序列遍历时，索引位置和对应值可以使用 enumerate() 函数同时得到：
		for i, v in enumerate(['a', 'b', 'c']):
    		print(str(i) + "-->" + v)

	③ 同时遍历两个或更多的序列，可以使用 zip() 函数组合遍历：
		questions = ['Q1', 'Q2', 'Q3']
		answers = ['A1', 'A2', 'A3']
		for q, a in zip(questions, answers):
		    print('Q: {0}, A: {1}'.format(q, a))

18.集合推导式：
	① 例1：
		ls = [1, 2, 3]
		a = [x ** 2 for x in ls]
		print(a)

	② 例2：
		ls = [1, 2, 3]
		a = [(x, x ** 2) for x in ls]
		print(a)

	③ 例3：
		a = {x for x in 'abcdabceabcdf' if x not in 'abc'}
		print(a)

19.矩阵转换快捷方式(将 3X4 的矩阵列表转换为 4X3 列表)：
	matrix = [
	    [1, 2, 3, 4],
	    [5, 6, 7, 8],
	    [9, 10, 11, 12],
	]

	① 方式1(快捷方式)：
		matrix2 = [[row[i] for row in matrix] for i in range(4)]
		print(matrix2)

	② 方式2(按部就班)：
		matrix2 = []
		for i in range(4):
		    matrix2_row = []
		    for row in matrix:
		        matrix2_row.append(row[i])
		    matrix2.append(matrix2_row)
		print(matrix2)

	输出：
		[
		    [1, 5, 9],
		    [2, 6, 10],
		    [3, 7, 11],
		    [4, 8, 12]
		]

20.dict 数据类型 key、value 互换：
	dist_dict = {v: k for k, v in src_dict.items()}

21.dict 数据类型 获取键值的方式：
	dict_obj["k"]		# 不存在，则抛出异常
	dict_obj.get("k")	# 不存在，则返回 None
	
	正确的取值方式：

	①方式1：
		if "k" in dict_obj:
			print(dict_obj["k"])

	②方式2:
		dict_obj["k"] = dict_obj.get("k", "default_value")

22.三目运算符(条件运算符)：
	① Java、JavaScript ...：
		判段条件 ? 条件为真的结果 : 条件为假的结果
		例：max = a > b ？a : b
	② Python：
		条件为真的结果 if 判段条件 else 条件为假的结果
		例：max = a if a > b else b

23.Python `pass` 是空语句，是为了保持程序结构的完整性。`pass` 不做任何事情，一般用做占位语句，pass 前后的语句都能执行。
	例：
		if True:
		    print("1")
		    pass
		    print("2")
		else:
		    pass

24.异常处理：

	try:
		执行代码
	except [Exception1 as e]:
		发生异常时执行代码
	except [Exception2 as e]:
		发生异常时执行代码
	else:
		不发生异常时执行代码
	finally:
		不管有没异常都会执行的代码

25.主动抛异常：
	raise Exception("error:msg")

26.Python 逻辑运算符：
	and	布尔"与"
	or	布尔"或"
	not	布尔"非"

27.Python 默认日志 `logging` 模块配置日志输出参数：

	默认生成的 `root logger` 的 level 为 `logging.WARNING`，低于该级别的日志默认不输出。级别排序:FATAL(CRITICAL) > ERROR > WARNING(WARN) > INFO > DEBUG > NOTSET。

	例：
		① 日志输出级别设置为 INFO ，并设置日志格式，输出到日志文件：
			logging.basicConfig(filename="log.txt", filemode="a", level=logging.INFO, format="%(asctime)s.%(msecs)03d %(levelname)s:\t%(message)s", datefmt="%Y-%m-%d %H:%M:%S")

		② 日志输出级别设置为 DEBUG，并设置日志格式，输出到控制台：
			logging.basicConfig(level=logging.DEBUG, format="%(asctime)s.%(msecs)03d %(levelname)s:\t%(message)s", datefmt="%Y-%m-%d %H:%M:%S")

28.匿名函数(lambda):
	
	lambda 函数的语法：lambda [arg1 [,arg2,.....argn]]:expression

	应用示例：
		① 求和：
			sum = lambda x, y: x + y
			print(sum(1, 2))

		② 序列过滤 `filter`：
			s = [1, 2, 3]
			print(list(filter(lambda x: x % 2 == 0, s)))

		③ 序列映射 `map`：
			s = [1, 2, 3]
			print(list(map(lambda x: x * x + 1, s)))

		④ 序列累加 `reduce`：
			s = [1, 2, 3]
			print(reduce(lambda x, y: x + y, s))

	拓展：
		序列过滤 `filter`，序列映射 `map`，也可使用 序列推导式(集合推导式) 方式实现：
		① 序列过滤 `filter`：print(list(x for x in s if x % 2 == 0))
		② 序列映射 `map`	：print(list(x * x + 1 for x in s))

29.关于 Python 字符串前的 `r`、`b`、`u`、`f`：

	在字符串前面加 `r`，表示 Python 原始字符串（Raw String）。当遇到 `\`，防止转义。

	应用案例：
		① 系统路径：
			open(r"C:\Users\Administrator\Desktop\abc.txt")  等同于 open("C:\\Users\\Administrator\\Desktop\\abc.txt") 
			open(r"e:\text\abc.txt") 等同于 open("e:\\text\\abc.txt") 
		② 正则表达式：
			re.compile(r"\s*")

	拓展：
		类似的有 f(格式化)、b(字节)、u(unicode) 字符串前缀，在 Python3 中逐渐被 str.format()、str.encode("utf-8")/bytes.decode("utf-8")、str.encode("unicode_escape")/bytes.decode("unicode_escape") 取代。

	注：Python2 源码文件默认使用 `ascii` 编码，Python3 源码文件默认使用 `unicode` 编码。

30.Python 解释器编码的定义：
	
	在 Python 源码文件中第一行或者第二行中使用 `# coding=<encoding name>` 或 `# -*- coding: <encoding name> -*-` 定义解释器编码(https://www.python.org/dev/peps/pep-0263/)。
	
	例：
		① #!/usr/bin/python
		   # -*- coding: UTF-8 -*-
			
		② #!/usr/bin/python
		   # coding=utf-8
    	
    	③ # -*- coding: UTF-8 -*-

    查看默认编码：
	    >>> import sys
		>>> sys.getdefaultencoding()
		python2 ： 'ascii'
		python3 ： 'utf-8'

    注：
    	Python2 源码文件默认使用 `ascii`编码，Python3 源码文件默认使用 `utf-8`编码。使用 Python2 时，出现中文注释、中文变量值时需要定义该编码，并且保证源码文件保存编码与定义的编码一致。由于很多 IDE 编辑器默认的编码是 `UTF-8` ，支持中文，而 Python3 默认编码也是 `utf-8` ，所以在 Python3 中可不定义该编码信息。


