# 专项

# branch

# 列出所有分支
git branch -a

# 查看远程分支
git branch -r

# 创建新分支
git branch ${branch-name}

# 某次提交创建新分支
git branch ${branch-name} ${commitHash}

# 切换分支
git checkout ${branch-name}

# 创建并切换到该分支
git checkout -b ${branch-name}

# 合并分支
git merge ${branch-name}

# 变基合并分支到当前分支
git rebase <分支名>

# 移动分支及 reflog 日志(重命名分支)
git branch -m master master_new

# 删除本地分支
git branch -d ${branch-name}

# 强制删除分支
git branch -D [分支]
# git branch -d 会在删除前检查 merge 状态。
# git branch -D 是 git branch --delete --force 的简写，它会直接删除。

# 删除远程仓库的分支
git push origin --delete [分支]



# tag

# 创建新标签
git tag ${tag-name}
# 历史版本创建标签
git tag -a v0.1 -m "注释" ${commitHash}

# 标签列表
git tag [-l]

# 标签详情
git show ${tag-name}

# 远程标签列表
git ls-remote --tags origin

# 推送所有本地 tag 到远程
git push origin --tags

# 推送本地指定 tag 到远程
git push origin ${tag-name}

# 拉取远程指定tag
git fetch origin [远程tag名]

# 删除标签
git tag -d ${tag-name}

# 删除本地所有的标签 
git tag -l | xargs git tag -d

# 删除远程指定tag
git push origin :refs/tags/[远程tag名]

# 从远程拉取所有信息
git fetch origin --prune



# stash

# 存储修改，并且将 git 的工作状态切回到 上次提交的 HEAD 上。
git stash save ["message"]

# 查看所有 stash 列表
git stash list 

# 查看某个特定 stash 与当前目录的差异。默认最新保存的 stash。
git stash show [stash]

# 查看详细的差异
git stash show -p

# 将某个 stash 变更应用到当前工作目录。这个 stash 不会从 stash 列表中移除。如果不指定 stash，默认会应用最新的 stash。
git stash apply [stash]

# git stash apply 类似，但在应用完 stash 后会将该 stash 从 stash 列表中删除。
git stash pop [stash]

# 删除某个 stash，从 stash 列表中移除。如果不指定 stash，默认会删除最新的 stash。
git stash drop [stash]

# 删除所有的stash，它会清除所有保存的 stash 记录，！！！慎用。
git stash clear

# 创建一个新分支并将某个 stash 的变更应用到新分支上。这样可以在一个干净的环境中继续开发。
git stash branch <branchname> <stash>]



# diff

# 列出分支差异文件
git diff master dev --stat
# 列出某文件差异
git diff master dev -- ${fileName}
# 列出所有差异
git diff master dev



# 拓展

① tag & branch 区别：
	tag 是一系列 commit 中的一个点，只能查看，不能移动，tag 是静态的。
	branch 是一系列串联的 commit 的线，branch 是动态的。


② fetch & pull 区别：
	fetch 从远程获取代码库。
	pull 从远程获取代码并合并本地的版本。
	git pull = git fetch + git merge


③ merge & rebase 区别：  
	merge & rebase 都是合并分支到当前分支。
	merge 合并分支会新增一个 merge commit，对现有分支不会以任何方式被更改。
	rebase 会将整个分支移动到另一个分支上，整合了所有分支上的提交。rebase 主要的好处是历史记录更加清晰，在原有提交的基础上合并了分支每次的提交历史，并消除了 git merge 合并提交。

④ log & reflog 区别：
	log 是查看提交记录(commit)。
	reflog 是查看操作记录。
	两者最大区别是能不能查询到被删除的 commit 记录和 reset 的操作记录。reflog 能，而 log 不能。


⑤ `HEAD^` & `HEAD~` HEAD 指针：

	# 当前提交
	HEAD = HEAD~0 = HEAD^0

	# 主线回溯
	HEAD~1 = HEAD^ 主线的上一次提交
	HEAD~2 = HEAD^^ 主线的上二次提交
	HEAD~3 = HEAD^^^ 主线的上三次提交

	# 如果某个节点有其他分支并入
	HEAD^1 主线提交（第一个父提交）
	HEAD^2 切换到了第2个并入的分支并得到最近一次的提交
	HEAD^2~3 切换到了第2个并入的分支并得到最近第 4 次的提交
	HEAD^3~2 切换到了第3个并入的分支并得到最近第 3 次的提交

	# ^{n} 和 ^ 重复 n 次的区别
	HEAD~1 = HEAD^
	HEAD~2 = HEAD^^
	HEAD~3 = HEAD^^^
	# 切换父级
	HEAD^1~3 = HEAD~4
	HEAD^2~3 = HEAD^2^^^
	HEAD^3~3 = HEAD^3^^^

	例：比较与上上一个版本的差异
		git diff HEAD^^
		git diff HEAD~2

