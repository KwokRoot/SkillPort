Git-基础命令

# 查看某命令的详细说明
git help <command>

# 配置 Git

## 查看 Git 配置
git config [--global] -l
## 设置配置项
git config [--global] user.name "${name}"
git config [--global] user.email "${email}"

例：Git 全局配置：
git config --global user.name "kwok"
git config --global user.email "kwok@abc.com"
git config --global -l



# 使用 Git

## 从远程仓库克隆整个项目
git clone ${url}

# 初始化项目,创建或在当前目录初始化一个 git 代码库
git init ${project-name}

# 当前仓库状态(当前分支等信息)
git status

# 提交全部文件修改到暂存区
git add .

# 提交某些文件到暂存区
git add <目录或文件> 

# 显示所有未添加至暂存区的变更
git diff

# 显示所有已添加暂存区但还未commit的变更
git diff --staged
git diff --cached

# 恢复暂存区(已执行 git add *)的文件
git restore --staged <file>

# 恢复更改(未在暂存区)的文件
git restore <file>

# 重置暂存区的指定文件，与上一次 commit 保持一致，但工作区不变
git reset [file]

# 提交代码到本地仓库，并写提交注释
git commit -m "<注释>"

# 提交时显示所有diff信息
git commit -v



# 列出所有分支
git branch -a

# 创建新分支
git branch ${branch-name}

# 某次提交创建新分支
git branch ${branch-name} ${commitHash}

# 切换分支
git checkout ${branch-name}

# 从当前分支创建新分支 branch_xxx 并检出
git checkout -b branch_xxx

# 从 branch_xxx 分支创建新分支 branch_yyy 并检出
git checkout -b branch_yyy branch_xxx

# 合并分支到当前分支
git merge <分支名>

# 合并分支出现冲突时，取消合并，一切回到合并前的状态
git merge --abort

# 变基合并分支到当前分支
git rebase <分支名>

# 选择已存在的 commit 应用到当前分支
git cherry-pick {commitHash-A} {commitHash-B}
git cherry-pick {commitHash-A}^..{commitHash-B}

# 删除本地分支
git branch -d ${branch-name}



# 显示所有远程仓库
git remote -v

# 上传本地指定分支到远程仓库
git push [remote] [branch]
例：git push origin master
注：若推送时使用 git push -u origin master，则以后该本地分支推送只需使用 git push

# 强行推送当前分支到远程仓库，即使有冲突
git push [remote] --force

# 推送所有分支到远程仓库
git push [remote] --all

# 获取当前分支线上最新版信息记录，不改动到工作区。
git fetch

# 获取所有远程仓库更新，不改动到工作区
git fetch origin

# 更新本地仓库到最新改动
git pull
注：git pull = git fetch + git merge

# 拉取远程仓库的分支与本地当前分支合并
git pull <远程仓库名> <远程分支名>

# 拉取远程仓库的分支与本地某个分支合并
git pull <远程仓库名> <远程分支名>:<本地分支名>



# 查看所有提交记录
git log
## 查看某人提交记录
git log --author=someone
## 文件提交历史详情
git log -p ${filename}

# 查看某次提交具体修改内容
git show {commitHash}

# 文件历史修改记录
git blame ${filename}

# 显示所有提交，包括孤立节点
git reflog

# 将当前版本重置为HEAD，本地修改会重置
git reset --hard HEAD

